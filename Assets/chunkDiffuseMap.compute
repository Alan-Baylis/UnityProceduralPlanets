#pragma kernel main

#pragma target 3.0
#include "planet.cginc"

Texture2D<float4> param_biomesControlMap;
SamplerState samplerparam_biomesControlMap;

RWTexture2D<float4> param_texture;
float3 param_rangeA;
float3 param_rangeB;
float3 param_rangeC;
float3 param_rangeD;

[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float w, h;
	param_texture.GetDimensions(w, h);
	float2 uv = id.xy / float2(w, h);

	/*
	float3 positionInterpolated =
		param_rangeA +
		(param_rangeB - param_rangeA) * uv.y * (1 - uv.x) +
		(param_rangeC - param_rangeA) * uv.y * uv.x;

	float3 dirFromPlanetCenter = normalize(positionInterpolated);
	float2 spherical = calestialToSpherical(dirFromPlanetCenter).xy;
	float humidity = GetHumidity(spherical);

	float altFromBottomOfSea = GetProceduralHeight01(dirFromPlanetCenter);
	float altFromSea = altFromBottomOfSea - param_seaLevel01;
	// 1 at meridian.. 0 at poles
	float distanceFromPoles = 1 - abs(spherical.y - 0.5) * 2;
	float temperature = (1 - abs(altFromSea)) * distanceFromPoles;

	float4 biome = param_biomesControlMap.SampleLevel(
		samplerparam_biomesControlMap,
		float2(temperature, humidity),
		0 // 0 = biggest mip map
	);
	param_texture[id.xy] = biome;
	*/

	// DEBUG
	param_texture[id.xy] = float4(uv.x, uv.y, 0, 0);
	//if(altFromBottomOfSea > param_seaLevel01) param_texture[id.xy] = float4(0,0,1,0); else param_texture[id.xy] = float4(1, 1, 0, 0);

}