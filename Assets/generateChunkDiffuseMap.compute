#pragma kernel main

#include "planet.compute.cginc"

Texture2D<float> _chunkHeightMap;
float3 _rangeA;
float3 _rangeB;
float3 _rangeC;
float3 _rangeD;
float _chunkRelativeSize;

RWTexture2D<float4> _chunkDiffuseMap;

[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float2 uv = GetUV(_chunkDiffuseMap, id.xy);



	float w, h;
	_chunkHeightMap.GetDimensions(w, h);

	const float eps = 100;
	float off = _chunkRelativeSize / eps;

	float sx0 = SampleLinearFloat(_chunkHeightMap, uv + float2(off/w, 0));
	float sx1 = SampleLinearFloat(_chunkHeightMap, uv + float2(-off/w, 0));
	float sy0 = SampleLinearFloat(_chunkHeightMap, uv + float2(0, off/h));
	float sy1 = SampleLinearFloat(_chunkHeightMap, uv + float2(0, -off/h));

	float slope = (abs(sx0 - sx1) + abs(sy0 - sy1)) * eps;


	const float3 grass = float3(121, 136, 69) / float3(255, 255, 255); // grass
	const float3 clay = float3(139, 133, 75) / float3(255, 255, 255); // clay
	const float3 rock = float3(100, 100, 100) / float3(255, 255, 255); // rock


	float3 color;
	
	if (slope < 0.1) color = grass;
	else if(slope < 0.25) color = clay;
	else color = rock;


	// DEBUG
	//color = float3(1, 1, 1) * slope;
	//color = PACK_NORMAL(normal);
	//color = SampleLinearFloat(_chunkNormalMap, uv);

	_chunkDiffuseMap[id.xy] = float4(color, 1);

}