#pragma kernel main

#include "planet.compute.cginc"

Texture2D _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

Texture2D _grass;
SamplerState sampler_grass;

Texture2D _clay;
SamplerState sampler_clay;

Texture2D _rock;
SamplerState sampler_rock;

float3 _rangeA;
float3 _rangeB;
float3 _rangeC;
float3 _rangeD;
float _chunkRelativeSize;
float _textureSamplingLOD;



RWTexture2D<float4> _chunkDiffuseMap;



float3 triPlanar(Texture2D tex, SamplerState samp, float3 position, float3 normal, float scale)
{

	float3 blendWeights = pow(abs(normal), float3(20, 20, 20));
	blendWeights /= blendWeights.x + blendWeights.y + blendWeights.z;

	return
		blendWeights.x * tex.SampleLevel(samp, position.yz * scale, _textureSamplingLOD).xyz +
		blendWeights.y * tex.SampleLevel(samp, position.zx * scale, _textureSamplingLOD).xyz +
		blendWeights.z * tex.SampleLevel(samp, position.xy * scale, _textureSamplingLOD).xyz;
}




[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float2 uv = GetUV(_chunkDiffuseMap, id.xy);



	float w, h;
	_chunkHeightMap.GetDimensions(w, h);


	float off = 0.0001 / _chunkRelativeSize;

	float sx0 = _chunkHeightMap.SampleLevel(sampler_chunkHeightMap, uv + float2(off, 0), 0).r;
	float sx1 = _chunkHeightMap.SampleLevel(sampler_chunkHeightMap, uv + float2(-off, 0), 0).r;
	float sy0 = _chunkHeightMap.SampleLevel(sampler_chunkHeightMap, uv + float2(0, off), 0).r;
	float sy1 = _chunkHeightMap.SampleLevel(sampler_chunkHeightMap, uv + float2(0, -off), 0).r;

	float slope = (abs(sx0 - sx1) + abs(sy0 - sy1)) * 30;

	float3 dir = lerp(
		lerp(_rangeA, _rangeB, uv.x),
		lerp(_rangeD, _rangeC, uv.x),
		uv.y
	);
	dir = normalize(dir);

	float3 normal = normalize(float3(sx0 - sx1, sy0 - sy1, 100));


	const float3 grass = float3(121, 136, 69) / float3(255, 255, 255); // grass
	const float3 clay = float3(139, 133, 75) / float3(255, 255, 255); // clay
	const float3 rock = float3(100, 100, 100) / float3(255, 255, 255); // rock


	float3 color;

	/*if (slope < 0.1) color = triPlanar(_grass, sampler_grass, dir, dir, 1);
	else if (slope < 0.3) color = triPlanar(_clay, sampler_clay, dir, dir, 1);
	else color = triPlanar(_rock, sampler_rock, dir, dir, 1);*/




	// DEBUG
	//color = float3(1, 1, 1) * slope;
	//color = PACK_NORMAL(normal);
	//color = SampleLinearFloat(_chunkNormalMap, uv);
	if (slope < 0.15) color = grass; else if (slope < 0.3) color = clay;	else color = rock;

	// SAFE
	if (slope > 1) color = float3(1, 0, 0);

	_chunkDiffuseMap[id.xy] = float4(color, 1);

}