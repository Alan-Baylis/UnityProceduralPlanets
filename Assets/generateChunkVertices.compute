#pragma kernel main

#include "planet.cginc"

Texture2D<float4> _heightMap;
SamplerState sampler_heightMap;
float GetCubicInterpolatedHeight(float2 uv)
{
	float w, h;
	_heightMap.GetDimensions(w, h);
	int2 xy = int2(uv.x * w, uv.y * h);
	return _heightMap[xy].x;
}


int _numberOfVerticesOnEdge;
float _radiusBase;
float _radiusHeightMap;

RWStructuredBuffer<float3> _vertices;
float3 _rangeA;
float3 _rangeB;
float3 _rangeC;
float3 _rangeD;


[numthreads(1, 1, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float max = float(_numberOfVerticesOnEdge - 1);
	float2 uv = float2(id.x / max, id.y / max);

	float3 posTop = _rangeA * (1 - uv.x) + _rangeB * uv.x;
	float3 posBottom = _rangeD * (1 - uv.x) + _rangeC * uv.x;
	float3 pos = posTop * (1 - uv.y) + posBottom * uv.y;

	float3 dir = normalize(pos);

	float2 heightMapUv = dirFromCenterToBaseMapUv(dir);

	float height = GetCubicInterpolatedHeight(heightMapUv);

	_vertices[id.x + id.y * _numberOfVerticesOnEdge] = dir * (_radiusBase + _radiusHeightMap * height);
}