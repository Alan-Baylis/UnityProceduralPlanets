#pragma kernel main

#include "planet.compute.cginc"

Texture2D _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

int _numberOfVerticesOnEdge;
float _planetRadiusStart;
float _planetRadiusHeightMapMultiplier;

float3 _rangeDirA;
float3 _rangeDirB;
float3 _rangeDirC;
float3 _rangeDirD;

float3 _rangeLocalPosA;
float3 _rangeLocalPosB;
float3 _rangeLocalPosC;
float3 _rangeLocalPosD;


RWStructuredBuffer<float3> _vertices;

[numthreads(1, 1, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float max = float(_numberOfVerticesOnEdge - 1);
	float2 uv = float2(id.x / max, id.y / max);

	float3 dir = lerp(
		lerp(_rangeDirA, _rangeDirB, uv.x),
		lerp(_rangeDirD, _rangeDirC, uv.x),
		uv.y
	);
	float3 dirNorm = normalize(dir);

	float3 localPos = lerp(
		lerp(_rangeLocalPosA, _rangeLocalPosB, uv.x),
		lerp(_rangeLocalPosD, _rangeLocalPosC, uv.x),
		uv.y
	);

	localPos += (dirNorm - dir) * _planetRadiusStart; // only here we use potentially huge numbers

	float height = 
		_chunkHeightMap.SampleLevel(sampler_chunkHeightMap, uv, 0).r *
		_planetRadiusHeightMapMultiplier;

	//DEBUG
	//height = 0;

	_vertices[id.x + id.y * _numberOfVerticesOnEdge] = localPos + dirNorm * height;
}