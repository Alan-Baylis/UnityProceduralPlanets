#pragma kernel main

#include "planet.compute.cginc"


Texture2D<float> _planetHeightMap;

Texture2D<float> _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

Texture2D<float4> _chunkSlopeAndCurvatureMap;
SamplerState sampler_chunkSlopeAndCurvatureMap;

Texture2D<float4> _grass;
SamplerState sampler_grass;

Texture2D<float4> _clay;
SamplerState sampler_clay;

Texture2D<float4> _rock;
SamplerState sampler_rock;

float3 _rangeDirA;
float3 _rangeDirB;
float3 _rangeDirC;
float3 _rangeDirD;
int _slopeModifier;



RWTexture2D<float4> _chunkDiffuseMap;




float3 ramp(float v)
{
	return hsvToRgb(float3(clamp(v, 0, 1) / 1.35 + 0.25, 1, 1));
}

[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float2 uv = getUv(_chunkDiffuseMap, id.xy);


	double2 slopeXY = double2(_chunkSlopeAndCurvatureMap[id.xy].xy);
	double slope = saturate(length(slopeXY) * 0.5);


	const float3 grass = float3(121, 136, 69) / float3(255, 255, 255); // grass
	const float3 clay = float3(139, 133, 75) / float3(255, 255, 255); // clay
	const float3 rock = float3(100, 100, 100) / float3(255, 255, 255); // rock


	float3 color;

	if (slope < 0.7)
		color = grass;
	else if (slope < 0.3)
		color = clay;
	else
		color = rock;


	// DEBUG
	//color = float3(1, 1, 1) * slope;
	//color = PACK_NORMAL(normal);
	//color = SampleLinearFloat(_chunkNormalMap, uv);
	//color = float3(1, 1, 1) * slope;
	//color = _chunkSlopeAndCurvatureMap[id.xy].xyz;
	color = ramp(slope);
	//color = float3(slopeXY, 0);
	//color = float3(slope > 0, 0, 0);
	//color = _chunkSlopeAndCurvatureMap[id.xy].xyz;
	//color = float3(_chunkHeightMap[id.xy].x > 0 && _chunkHeightMap[id.xy].x < 0.5, 0, 0);
	//color = _chunkHeightMap[id.xy].xyz;

	// SAFE
	//if (slope > 1) color = float3(1, 0, 0);

	_chunkDiffuseMap[id.xy] = float4(color, 1);

}