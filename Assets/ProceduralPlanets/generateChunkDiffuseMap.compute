#pragma kernel main

#include "planet.compute.cginc"


Texture2D<float> _planetHeightMap;

Texture2D<float> _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

Texture2D<float4> _chunkSlopeAndCurvatureMap;
SamplerState sampler_chunkSlopeAndCurvatureMap;

Texture2D<float4> _grass;
SamplerState sampler_grass;

Texture2D<float4> _clay;
SamplerState sampler_clay;

Texture2D<float4> _rock;
SamplerState sampler_rock;

float3 _rangeUnitCubePosA;
float3 _rangeUnitCubePosB;
float3 _rangeUnitCubePosC;
float3 _rangeUnitCubePosD;

int _slopeModifier;

float _heightMin;
float _heightMax;



RWTexture2D<float4> _chunkDiffuseMap;




float3 ramp(float v)
{
	return hsvToRgb(float3(clamp(v, 0, 1) / 1.35 + 0.25, 1, 1));
}

[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float2 uv = getUv(_chunkDiffuseMap, id.xy);

	float3 dir = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);
	dir = unitCubeToUnitSphere(dir);

	//double2 slopeXY = double2(_chunkSlopeAndCurvatureMap[id.xy].xy);
	float2 slopeXY = _chunkSlopeAndCurvatureMap.SampleLevel(sampler_chunkSlopeAndCurvatureMap, uv, 0).xy;
	float slope = length(slopeXY);

	float height = _chunkHeightMap[id.xy] * (_heightMax - _heightMin);

	const float3 grass = float3(121, 136, 69) / float3(255, 255, 255); // grass
	const float3 clay = float3(139, 133, 75) / float3(255, 255, 255); // clay
	const float3 rock = float3(100, 100, 100) / float3(255, 255, 255); // rock
	const float3 snow = float3(1, 1, 1); // white
	const float3 tundra = float3(0.5, 0.5, 0.5); // grey

	float altidute = height;
	float distanceToPoles = smoothstep(0.4, 1, abs(dir.z));
	float snowWeight = altidute + distanceToPoles + snoise(dir * 100, 5, 2) * 0.1;

	float3 color;

	if(slope > 0.4)
		color = rock;
	else {
		if (snowWeight > 1.5)
			color = snow;
		else if (snowWeight > 1.2)
			color = tundra;
		else if (slope < 0.25)
			color = grass;
		else
			color = clay;
	}


		


	// DEBUG
	//color = float3(1, 1, 1) * slope;
	//color = PACK_NORMAL(normal);
	//color = SampleLinearFloat(_chunkNormalMap, uv);
	//color = float3(1, 1, 1) * slope;
	//color = _chunkSlopeAndCurvatureMap[id.xy].xyz;
	//color = float3(slopeXY, 0);
	//color = float3(slope > 0, 0, 0);
	//color = _chunkSlopeAndCurvatureMap[id.xy].xyz;
	//color = float3(_chunkHeightMap[id.xy].x > 0 && _chunkHeightMap[id.xy].x < 0.5, 0, 0);
	//color = _chunkHeightMap[id.xy].xyz;
	//color = ramp(slope);

	// SAFE
	//if (slope > 1) color = float3(1, 0, 0);

	_chunkDiffuseMap[id.xy] = float4(color, 1);

}