#pragma kernel parentExists
#pragma kernel parentDoesNotExist

#include "Planet.Compute.cginc"

Texture2D<float4> _chunkSlopeAndCurvatureMap;
SamplerState sampler_chunkSlopeAndCurvatureMap;

Texture2D<float> _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

Texture2D<float3> _chunkMeshNormals;
SamplerState sampler_chunkMeshNormals;

float _heightMin;
float _heightMax;
int _numberOfVerticesOnEdge;
float _radiusStart;
float _radiusHeightMapMultiplier;
float _chunkRadius;

Texture2D<float4> _parentChunkNormalMap;
SamplerState sampler_parentChunkNormalMap;
float2 _uvOffsetInParent;



RWTexture2D<float4> _chunkNormalMap;



float2 getSlope(int2 idXy, int w, int h)
{
	int3 off = int3(-1, 0, 1);
	int2 s11pos = idXy;
	s11pos = max(s11pos, int2(1, 1));
	s11pos = min(s11pos, int2(w - 2, h - 2));
	// s00 __ s10 __ s20
	//  |      |      |
	// s01 __ s11 __ s21
	//  |      |      |
	// s02 __ s12 __ s22
	float s00 = _chunkHeightMap[s11pos + off.xx].r;
	float s10 = _chunkHeightMap[s11pos + off.yx].r;
	float s20 = _chunkHeightMap[s11pos + off.zx].r;

	float s01 = _chunkHeightMap[s11pos + off.xy].r;
	float s11 = _chunkHeightMap[s11pos].r;
	float s21 = _chunkHeightMap[s11pos + off.zy].r;

	float s02 = _chunkHeightMap[s11pos + off.xz].r;
	float s12 = _chunkHeightMap[s11pos + off.yz].r;
	float s22 = _chunkHeightMap[s11pos + off.zz].r;

	// modified https://en.wikipedia.org/wiki/Sobel_operator
	//-1 __ 0 __ 1
	// |    |    |
	//-2 __ 0 __ 2
	// |    |    |
	//-1 __ 0 __ 1
	float sx = s10 - s00;
	//-1 __-2 __-1
	// |    |    |
	// 0 __ 0 __ 0
	// |    |    |
	// 1 __ 2 __ 1
	float sy = s01 - s00;

	return float2(sx, sy);
}


float3 getNormal(int2 idXy, int w, int h)
{
	float len = _chunkRadius / w;
	float2 slope = getSlope(idXy, w, h) * _radiusHeightMapMultiplier;

	float3 normal = cross(
		normalize(float3(len, 0, slope.x)),
		normalize(float3(0, len, slope.y))
	);

	normal = normalize(normal);

	return normal;
}

[numthreads(16, 16, 1)]
void parentExists(uint3 id : SV_DispatchThreadID)
{
	int w, h;
	_chunkHeightMap.GetDimensions(w, h);
	float2 uv = id.xy / float2(w - 1, h - 1);

	float3 normal = getNormal(id.xy, w, h);

	float3 parentNormal = UNPACK_NORMAL(_parentChunkNormalMap.SampleLevel(sampler_parentChunkNormalMap, uv / 2.0 + _uvOffsetInParent, 0).xyz);
	normal = lerp(parentNormal, normal, 0.5);

	normal = normalize(normal);

	//DEBUG
	//normal = float3(0.5, 0.5, 1);

	_chunkNormalMap[id.xy] = float4(PACK_NORMAL(normal), 1);
}

[numthreads(16, 16, 1)]
void parentDoesNotExist(uint3 id : SV_DispatchThreadID)
{
	int w, h;
	_chunkHeightMap.GetDimensions(w, h);

	float3 normal = getNormal(id.xy, w, h);

	//DEBUG
	//normal = float3(0.5, 0.5, 1);

	_chunkNormalMap[id.xy] = float4(PACK_NORMAL(normal), 1);
}