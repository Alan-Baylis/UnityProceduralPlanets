#pragma kernel main

#include "Planet.Compute.cginc"

Texture2D<float4> _chunkSlopeAndCurvatureMap;
SamplerState sampler_chunkSlopeAndCurvatureMap;

Texture2D<float> _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

Texture2D<float3> _chunkMeshNormals;
SamplerState sampler_chunkMeshNormals;

float _heightMin;
float _heightMax;
int _numberOfVerticesOnEdge;
float _slopeModifier;
float _radiusStart;
float _radiusHeightMapMultiplier;
float _chunkRadius;

float3 _rangeUnitCubePosA;
float3 _rangeUnitCubePosB;
float3 _rangeUnitCubePosC;
float3 _rangeUnitCubePosD;

int _generation;





RWTexture2D<float4> _chunkNormalMap;

float2 getSlope(int2 idXy)
{
	int w, h;
	_chunkHeightMap.GetDimensions(w, h);
	int3 off = int3(-1, 0, 1);
	int2 s11pos = idXy;
	s11pos = max(s11pos, int2(1, 1));
	s11pos = min(s11pos, int2(w - 2, h - 2));
	// s00 __ s10 __ s20
	//  |      |      |
	// s01 __ s11 __ s21
	//  |      |      |
	// s02 __ s12 __ s22
	float s00 = _chunkHeightMap[s11pos + off.xx].r;
	float s10 = _chunkHeightMap[s11pos + off.yx].r;
	float s20 = _chunkHeightMap[s11pos + off.zx].r;

	float s01 = _chunkHeightMap[s11pos + off.xy].r;
	float s11 = _chunkHeightMap[s11pos].r;
	float s21 = _chunkHeightMap[s11pos + off.zy].r;

	float s02 = _chunkHeightMap[s11pos + off.xz].r;
	float s12 = _chunkHeightMap[s11pos + off.yz].r;
	float s22 = _chunkHeightMap[s11pos + off.zz].r;

	// modified https://en.wikipedia.org/wiki/Sobel_operator
	//-1 __ 0 __ 1
	// |    |    |
	//-2 __ 0 __ 2
	// |    |    |
	//-1 __ 0 __ 1
	float sx = s10 - s00;
	//-1 __-2 __-1
	// |    |    |
	// 0 __ 0 __ 0
	// |    |    |
	// 1 __ 2 __ 1
	float sy = s01 - s00;

	return float2(sx, sy);
}

float3 getDir(float2 uv)
{
	float3 dir = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);
	return normalize(dir);
}

[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float2 uv = getUv(_chunkHeightMap, id.xy);

	float circumference = 2 * M_PI * _radiusStart;

	circumference = 6280;

	float lenX = acos(dot(getDir(float2(0, uv.y)), getDir(float2(1, uv.y)))) / 3.14 / 2.0 * circumference / 256.0;
	float lenY = acos(dot(getDir(float2(uv.x, 0)), getDir(float2(uv.x, 1)))) / 3.14 / 2.0 * circumference / 256.0;

	float2 slope = getSlope(id.xy);
	float len = _chunkRadius / 256.0; // ~1.4 for root chunks
	slope *= _radiusHeightMapMultiplier;

	//len *= sqrt(sqrt(_generation + 1));
	//slope = _chunkSlopeAndCurvatureMap[id.xy].xy;
	//len = 0.5;

	float3 slopeNormal = cross(
		normalize(float3(lenX, 0, slope.x)),
		normalize(float3(0, lenY, slope.y))
	);
	slopeNormal = normalize(slopeNormal);


	float3 dir = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);
	dir = normalize(dir);
	dir = unitCubeToUnitSphere(dir);


	float3 meshNormal = UNPACK_NORMAL(_chunkMeshNormals.SampleLevel(sampler_chunkMeshNormals, uv, 0).xyz);
	meshNormal = normalize(meshNormal);

	float3 normal;
	
	normal = slopeNormal - (meshNormal - dir);
	//normal = slopeNormal;

	normal = normalize(normal);
	normal = PACK_NORMAL(normal);

	//DEBUG
	//normal = float3(0.5, 0.5, 1);

	_chunkNormalMap[id.xy] = float4(normal, 1);

}