#pragma kernel main

#include "planet.compute.cginc"



RWTexture2D<float> _planetHeightMap;



float GetProceduralHeight01(float3 dir)
{
	float result = 0;

	float2 w;
	float x;


	result += 1-abs(snoise(dir * 5, 10, 2));

	/*
	{ // terraces
	float3 pos = dir * 10;
	int octaves = 2;
	float freqModifier = 3;
	float ampModifier = 1/freqModifier;
	float amp = 1;
	for (int i = 0; i < octaves; i++)
	{
	float p = snoise(pos, 4, 10);
	result += terrace(p, 0.5) * amp;
	pos *= freqModifier;
	amp *= ampModifier;
	}
	}
	*/
	// small noise
	/*


	{ //big detail
	  //continents
		result += abs(snoise(dir*0.5, 5, 4));
		//w = worleyNoise(dir * 2);
		//result += (w.x - w.y) * 2;
		//oceans
		result -= abs(snoise(dir*2.2, 4, 4));
		//big rivers
		x = snoise(dir * 3, 3, 2);
		result += -exp(-pow(x * 55, 2)) * 0.2;
		//craters
		//w = worleyNoise(dir);
		//result += smoothstep(0.0, 0.1, w.x);
	}


	{ //small detail
		float p = snoise(dir * 10, 5, 10) * 100;
		float t = 0.3;
		t = clamp(snoise(dir * 2), 0.1, 1.0);
		result += terrace(p, 0.2)*0.005;
		result += p*0.005;
		//small rivers
		float x = snoise(dir * 3);
		//result += -exp(-pow(x*55,2)); 
	}


	{
		float p = snoise(dir * 10, 5, 10);
		//result += terrace(p, 0.15)*10;
		//result += p * 0.1;
	}

	{
		//float p = snoise(dir*10, 5, 10);
		//result += terrace(p, 0.1)/1;
	}


*/

	return result;

}



[numthreads(16, 16, 1)]
void main(uint3 id : SV_DispatchThreadID)
{
	float2 uv = getUv(_planetHeightMap, id.xy);

	float3 dir = baseMapUvToDirFromCenter(uv);

	float height01 = GetProceduralHeight01(dir);	

	height01 = clamp(height01, 0, 1);

	_planetHeightMap[id.xy] = height01;
}