#pragma kernel generateUsingPlanetGlobalPos
//#pragma kernel generateUsingChunkLocalPos

#include "planet.compute.cginc"



Texture2D _chunkHeightMap;
SamplerState sampler_chunkHeightMap;

int _numberOfVerticesOnEdge;
float _planetRadiusStart;
float _planetRadiusHeightMapMultiplier;

float3 _rangeUnitCubePosA;
float3 _rangeUnitCubePosB;
float3 _rangeUnitCubePosC;
float3 _rangeUnitCubePosD;

float3 _rangeLocalPosA;
float3 _rangeLocalPosB;
float3 _rangeLocalPosC;
float3 _rangeLocalPosD;

bool _shouldUseChunkLocalPossition;



RWStructuredBuffer<float3> _vertices;





[numthreads(1, 1, 1)]
void generateUsingPlanetGlobalPos(uint3 id : SV_DispatchThreadID)
{
	float max = _numberOfVerticesOnEdge - 1;
	float2 uv = float2(id.x / max, id.y / max);

	float3 unitCubePos = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);
	
	float3 dirNorm = unitCubeToUnitSphere(unitCubePos);

	float height =
		_chunkHeightMap.SampleLevel(sampler_chunkHeightMap, uv, 0).r *
		_planetRadiusHeightMapMultiplier;

	//DEBUG
	//height = 0;
	//height = clamp(height, 0, 1000);

	height += _planetRadiusStart;

	_vertices[id.x + id.y * _numberOfVerticesOnEdge] = dirNorm * height;
}

[numthreads(1, 1, 1)]
void generateUsingChunkLocalPos(uint3 id : SV_DispatchThreadID)
{
	float max = _numberOfVerticesOnEdge - 1;
	float2 uv = float2(id.x / max, id.y / max);

	float3 localPos = lerp(
		lerp(_rangeLocalPosA, _rangeLocalPosB, uv.x),
		lerp(_rangeLocalPosD, _rangeLocalPosC, uv.x),
		uv.y
	);

	float3 unitCubePos = lerp(
		lerp(_rangeUnitCubePosA, _rangeUnitCubePosB, uv.x),
		lerp(_rangeUnitCubePosD, _rangeUnitCubePosC, uv.x),
		uv.y
	);

	
	float3 dirNorm = unitCubeToUnitSphere(unitCubePos);


	float height = _chunkHeightMap.SampleLevel(sampler_chunkHeightMap, uv, 0).r * _planetRadiusHeightMapMultiplier + length(dirNorm - unitCubePos) * _planetRadiusStart;

	//DEBUG
	//height = 0;

	_vertices[id.x + id.y * _numberOfVerticesOnEdge] = localPos + dirNorm * height;
}

